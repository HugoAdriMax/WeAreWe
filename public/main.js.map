{"version":3,"file":"main.js","mappings":"mBAcA,SAASA,IACP,MAAyB,oBAAXC,MAChB,CACA,SAASC,IACP,IACE,MAAMC,EAAM,aACZ,GAAY,gBAARA,GAAiC,SAARA,EAC3B,MAAO,aAEX,CAAE,MAAOC,GACT,CACA,MAAO,YACT,CAeA,SAASC,IACP,MAAqB,kBAPRL,IAAcC,OAAOK,IAAMJ,MACzB,aAOjB,EA+BA,SAAgBK,EAAQ,CACtBC,OAAO,IAEP,IAAIC,EACJ,IAAKT,IACH,QApDJ,SAAiBU,EAAO,QAKtBT,OAAOK,IAJM,SAATI,EAISA,EAHER,GAIjB,CA+CES,CAAQJ,EAAMG,MA1EVT,OAAOW,KAEXX,OAAOW,GAAK,YAAcC,IACvBZ,OAAOa,IAAMb,OAAOa,KAAO,IAAIC,KAAKF,EACvC,GAwEIN,EAAMS,aACY,OAAnBP,EAAKR,OAAOW,KAAuBH,EAAGQ,KAAKhB,OAAQ,aAAcM,EAAMS,aAE1E,MAAME,EAAMX,EAAMY,YAAcd,IAbb,mDACC,+BAapB,GAAIe,SAASC,KAAKC,cAAc,gBAAgBJ,OAC9C,OACF,MAAMK,EAASH,SAASI,cAAc,UACtCD,EAAOL,IAAMA,EACbK,EAAOE,OAAQ,EACfF,EAAOG,QAAQC,KA1FN,qBA0FqBpB,EAAMqB,UAAY,IAAIrB,EAAMqB,YAAc,IACxEL,EAAOG,QAAQG,KA1FH,QA2FRtB,EAAMuB,mBACRP,EAAOG,QAAQI,iBAAmB,KAEhCvB,EAAMwB,WACRR,EAAOG,QAAQK,SAAWxB,EAAMwB,UAE9BxB,EAAMyB,MACRT,EAAOG,QAAQM,IAAMzB,EAAMyB,KAE7BT,EAAOU,QAAU,KACf,MAAMC,EAAe7B,IAAkB,6DAA+D,4IACtG8B,QAAQC,IACN,qDAAqDlB,MAAQgB,IAC9D,EAEC7B,MAAmC,IAAhBE,EAAMC,QAC3Be,EAAOG,QAAQlB,MAAQ,SAEzBY,SAASC,KAAKgB,YAAYd,EAC5B,EC/GAe,GACAH,QAAQC,IAAI,+C","sources":["webpack://agency/./node_modules/@vercel/analytics/dist/index.mjs","webpack://agency/./src/main.ts"],"sourcesContent":["// package.json\nvar name = \"@vercel/analytics\";\nvar version = \"1.3.1\";\n\n// src/queue.ts\nvar initQueue = () => {\n  if (window.va)\n    return;\n  window.va = function a(...params) {\n    (window.vaq = window.vaq || []).push(params);\n  };\n};\n\n// src/utils.ts\nfunction isBrowser() {\n  return typeof window !== \"undefined\";\n}\nfunction detectEnvironment() {\n  try {\n    const env = process.env.NODE_ENV;\n    if (env === \"development\" || env === \"test\") {\n      return \"development\";\n    }\n  } catch (e) {\n  }\n  return \"production\";\n}\nfunction setMode(mode = \"auto\") {\n  if (mode === \"auto\") {\n    window.vam = detectEnvironment();\n    return;\n  }\n  window.vam = mode;\n}\nfunction getMode() {\n  const mode = isBrowser() ? window.vam : detectEnvironment();\n  return mode || \"production\";\n}\nfunction isProduction() {\n  return getMode() === \"production\";\n}\nfunction isDevelopment() {\n  return getMode() === \"development\";\n}\nfunction removeKey(key, { [key]: _, ...rest }) {\n  return rest;\n}\nfunction parseProperties(properties, options) {\n  if (!properties)\n    return void 0;\n  let props = properties;\n  const errorProperties = [];\n  for (const [key, value] of Object.entries(properties)) {\n    if (typeof value === \"object\" && value !== null) {\n      if (options.strip) {\n        props = removeKey(key, props);\n      } else {\n        errorProperties.push(key);\n      }\n    }\n  }\n  if (errorProperties.length > 0 && !options.strip) {\n    throw Error(\n      `The following properties are not valid: ${errorProperties.join(\n        \", \"\n      )}. Only strings, numbers, booleans, and null are allowed.`\n    );\n  }\n  return props;\n}\n\n// src/generic.ts\nvar DEV_SCRIPT_URL = \"https://va.vercel-scripts.com/v1/script.debug.js\";\nvar PROD_SCRIPT_URL = \"/_vercel/insights/script.js\";\nfunction inject(props = {\n  debug: true\n}) {\n  var _a;\n  if (!isBrowser())\n    return;\n  setMode(props.mode);\n  initQueue();\n  if (props.beforeSend) {\n    (_a = window.va) == null ? void 0 : _a.call(window, \"beforeSend\", props.beforeSend);\n  }\n  const src = props.scriptSrc || (isDevelopment() ? DEV_SCRIPT_URL : PROD_SCRIPT_URL);\n  if (document.head.querySelector(`script[src*=\"${src}\"]`))\n    return;\n  const script = document.createElement(\"script\");\n  script.src = src;\n  script.defer = true;\n  script.dataset.sdkn = name + (props.framework ? `/${props.framework}` : \"\");\n  script.dataset.sdkv = version;\n  if (props.disableAutoTrack) {\n    script.dataset.disableAutoTrack = \"1\";\n  }\n  if (props.endpoint) {\n    script.dataset.endpoint = props.endpoint;\n  }\n  if (props.dsn) {\n    script.dataset.dsn = props.dsn;\n  }\n  script.onerror = () => {\n    const errorMessage = isDevelopment() ? \"Please check if any ad blockers are enabled and try again.\" : \"Be sure to enable Web Analytics for your project and deploy again. See https://vercel.com/docs/analytics/quickstart for more information.\";\n    console.log(\n      `[Vercel Web Analytics] Failed to load script from ${src}. ${errorMessage}`\n    );\n  };\n  if (isDevelopment() && props.debug === false) {\n    script.dataset.debug = \"false\";\n  }\n  document.head.appendChild(script);\n}\nfunction track(name2, properties, options) {\n  var _a, _b;\n  if (!isBrowser()) {\n    const msg = \"[Vercel Web Analytics] Please import `track` from `@vercel/analytics/server` when using this function in a server environment\";\n    if (isProduction()) {\n      console.warn(msg);\n    } else {\n      throw new Error(msg);\n    }\n    return;\n  }\n  if (!properties) {\n    (_a = window.va) == null ? void 0 : _a.call(window, \"event\", { name: name2, options });\n    return;\n  }\n  try {\n    const props = parseProperties(properties, {\n      strip: isProduction()\n    });\n    (_b = window.va) == null ? void 0 : _b.call(window, \"event\", {\n      name: name2,\n      data: props,\n      options\n    });\n  } catch (err) {\n    if (err instanceof Error && isDevelopment()) {\n      console.error(err);\n    }\n  }\n}\nfunction pageview({ route, path }) {\n  var _a;\n  (_a = window.va) == null ? void 0 : _a.call(window, \"pageview\", {\n    route,\n    path\n  });\n}\nvar generic_default = {\n  inject,\n  track\n};\nexport {\n  DEV_SCRIPT_URL,\n  PROD_SCRIPT_URL,\n  generic_default as default,\n  inject,\n  pageview,\n  track\n};\n//# sourceMappingURL=index.mjs.map","import { inject } from '@vercel/analytics';\ninject();\nconsole.log(\"Vercel Analytics script loaded successfully!\");\n"],"names":["isBrowser","window","detectEnvironment","env","e","isDevelopment","vam","props","debug","_a","mode","setMode","va","params","vaq","push","beforeSend","call","src","scriptSrc","document","head","querySelector","script","createElement","defer","dataset","sdkn","framework","sdkv","disableAutoTrack","endpoint","dsn","onerror","errorMessage","console","log","appendChild","inject"],"sourceRoot":""}